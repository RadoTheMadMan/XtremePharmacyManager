//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XtremePharmacyManager.DataEntities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.Entity.Core.EntityClient;

    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
        public Entities(EntityConnectionStringBuilder builder) : base(builder.ConnectionString)
        {

        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DeliveryService> DeliveryServices { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<OrderDelivery> OrderDeliveries { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }
        public virtual DbSet<ProductBrand> ProductBrands { get; set; }
        public virtual DbSet<ProductImage> ProductImages { get; set; }
        public virtual DbSet<ProductOrder> ProductOrders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<ClientView> ClientViews { get; set; }
        public virtual DbSet<EmployeeView> EmployeeViews { get; set; }
        public virtual DbSet<ExtendedBrandsView> ExtendedBrandsViews { get; set; }
        public virtual DbSet<ExtendedDeliveryServicesView> ExtendedDeliveryServicesViews { get; set; }
        public virtual DbSet<ExtendedOrderDeliveriesView> ExtendedOrderDeliveriesViews { get; set; }
        public virtual DbSet<ExtendedPaymentMethodsView> ExtendedPaymentMethodsViews { get; set; }
        public virtual DbSet<ExtendedProductOrdersView> ExtendedProductOrdersViews { get; set; }
        public virtual DbSet<ExtendedProductView> ExtendedProductViews { get; set; }
    
        public virtual int AddBrand(string brandname)
        {
            var brandnameParameter = brandname != null ?
                new ObjectParameter("brandname", brandname) :
                new ObjectParameter("brandname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBrand", brandnameParameter);
        }
    
        public virtual int AddDeliveryService(string servicename, Nullable<decimal> price)
        {
            var servicenameParameter = servicename != null ?
                new ObjectParameter("servicename", servicename) :
                new ObjectParameter("servicename", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDeliveryService", servicenameParameter, priceParameter);
        }
    
        public virtual int AddLog(Nullable<System.DateTime> logdate, string logtitle, string logmessage, string additionalinformation)
        {
            var logdateParameter = logdate.HasValue ?
                new ObjectParameter("logdate", logdate) :
                new ObjectParameter("logdate", typeof(System.DateTime));
    
            var logtitleParameter = logtitle != null ?
                new ObjectParameter("logtitle", logtitle) :
                new ObjectParameter("logtitle", typeof(string));
    
            var logmessageParameter = logmessage != null ?
                new ObjectParameter("logmessage", logmessage) :
                new ObjectParameter("logmessage", typeof(string));
    
            var additionalinformationParameter = additionalinformation != null ?
                new ObjectParameter("additionalinformation", additionalinformation) :
                new ObjectParameter("additionalinformation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLog", logdateParameter, logtitleParameter, logmessageParameter, additionalinformationParameter);
        }
    
        public virtual int AddOrderDelivery(Nullable<int> orderid, Nullable<int> serviceid, Nullable<int> methodid, string deliveryreason)
        {
            var orderidParameter = orderid.HasValue ?
                new ObjectParameter("orderid", orderid) :
                new ObjectParameter("orderid", typeof(int));
    
            var serviceidParameter = serviceid.HasValue ?
                new ObjectParameter("serviceid", serviceid) :
                new ObjectParameter("serviceid", typeof(int));
    
            var methodidParameter = methodid.HasValue ?
                new ObjectParameter("methodid", methodid) :
                new ObjectParameter("methodid", typeof(int));
    
            var deliveryreasonParameter = deliveryreason != null ?
                new ObjectParameter("deliveryreason", deliveryreason) :
                new ObjectParameter("deliveryreason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrderDelivery", orderidParameter, serviceidParameter, methodidParameter, deliveryreasonParameter);
        }
    
        public virtual int AddPaymentMethod(string methodname)
        {
            var methodnameParameter = methodname != null ?
                new ObjectParameter("methodname", methodname) :
                new ObjectParameter("methodname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPaymentMethod", methodnameParameter);
        }
    
        public virtual int AddProduct(string productname, Nullable<int> brandid, string description, Nullable<int> quantity, Nullable<decimal> price, Nullable<System.DateTime> expirydate, string regnum, string partnum, string storagelocation)
        {
            var productnameParameter = productname != null ?
                new ObjectParameter("productname", productname) :
                new ObjectParameter("productname", typeof(string));
    
            var brandidParameter = brandid.HasValue ?
                new ObjectParameter("brandid", brandid) :
                new ObjectParameter("brandid", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var expirydateParameter = expirydate.HasValue ?
                new ObjectParameter("expirydate", expirydate) :
                new ObjectParameter("expirydate", typeof(System.DateTime));
    
            var regnumParameter = regnum != null ?
                new ObjectParameter("regnum", regnum) :
                new ObjectParameter("regnum", typeof(string));
    
            var partnumParameter = partnum != null ?
                new ObjectParameter("partnum", partnum) :
                new ObjectParameter("partnum", typeof(string));
    
            var storagelocationParameter = storagelocation != null ?
                new ObjectParameter("storagelocation", storagelocation) :
                new ObjectParameter("storagelocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProduct", productnameParameter, brandidParameter, descriptionParameter, quantityParameter, priceParameter, expirydateParameter, regnumParameter, partnumParameter, storagelocationParameter);
        }
    
        public virtual int AddProductImage(Nullable<int> productid, string imagename, byte[] imagedata)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var imagenameParameter = imagename != null ?
                new ObjectParameter("imagename", imagename) :
                new ObjectParameter("imagename", typeof(string));
    
            var imagedataParameter = imagedata != null ?
                new ObjectParameter("imagedata", imagedata) :
                new ObjectParameter("imagedata", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProductImage", productidParameter, imagenameParameter, imagedataParameter);
        }
    
        public virtual int AddProductOrder(Nullable<int> productid, Nullable<int> desiredquantity, Nullable<decimal> priceoverride, Nullable<int> clientid, Nullable<int> employeeid, string orderreason, Nullable<bool> overridepriceastotal)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var desiredquantityParameter = desiredquantity.HasValue ?
                new ObjectParameter("desiredquantity", desiredquantity) :
                new ObjectParameter("desiredquantity", typeof(int));
    
            var priceoverrideParameter = priceoverride.HasValue ?
                new ObjectParameter("priceoverride", priceoverride) :
                new ObjectParameter("priceoverride", typeof(decimal));
    
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(int));
    
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            var orderreasonParameter = orderreason != null ?
                new ObjectParameter("orderreason", orderreason) :
                new ObjectParameter("orderreason", typeof(string));
    
            var overridepriceastotalParameter = overridepriceastotal.HasValue ?
                new ObjectParameter("overridepriceastotal", overridepriceastotal) :
                new ObjectParameter("overridepriceastotal", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProductOrder", productidParameter, desiredquantityParameter, priceoverrideParameter, clientidParameter, employeeidParameter, orderreasonParameter, overridepriceastotalParameter);
        }
    
        public virtual ObjectResult<string> AddUser(string username, string password, string displayname, Nullable<System.DateTime> birthdate, string phone, string email, string address, byte[] profilepic, Nullable<decimal> balance, string diagnose, Nullable<int> role)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var displaynameParameter = displayname != null ?
                new ObjectParameter("displayname", displayname) :
                new ObjectParameter("displayname", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var profilepicParameter = profilepic != null ?
                new ObjectParameter("profilepic", profilepic) :
                new ObjectParameter("profilepic", typeof(byte[]));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(decimal));
    
            var diagnoseParameter = diagnose != null ?
                new ObjectParameter("diagnose", diagnose) :
                new ObjectParameter("diagnose", typeof(string));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AddUser", usernameParameter, passwordParameter, displaynameParameter, birthdateParameter, phoneParameter, emailParameter, addressParameter, profilepicParameter, balanceParameter, diagnoseParameter, roleParameter);
        }
    
        public virtual int DeleteBrand(Nullable<int> id, string brandname)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var brandnameParameter = brandname != null ?
                new ObjectParameter("brandname", brandname) :
                new ObjectParameter("brandname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBrand", idParameter, brandnameParameter);
        }
    
        public virtual ObjectResult<string> DeleteBrandByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteBrandByID", idParameter);
        }
    
        public virtual int DeleteDeliveryService(Nullable<int> id, string servicename, Nullable<decimal> serviceprice)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var servicenameParameter = servicename != null ?
                new ObjectParameter("servicename", servicename) :
                new ObjectParameter("servicename", typeof(string));
    
            var servicepriceParameter = serviceprice.HasValue ?
                new ObjectParameter("serviceprice", serviceprice) :
                new ObjectParameter("serviceprice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDeliveryService", idParameter, servicenameParameter, servicepriceParameter);
        }
    
        public virtual ObjectResult<string> DeleteDeliveryServiceByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteDeliveryServiceByID", idParameter);
        }
    
        public virtual int DeleteLog(Nullable<int> id, Nullable<System.DateTime> logdatefrom, Nullable<System.DateTime> logdateto, string logtitle, string logmessage, string additionalinformation)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var logdatefromParameter = logdatefrom.HasValue ?
                new ObjectParameter("logdatefrom", logdatefrom) :
                new ObjectParameter("logdatefrom", typeof(System.DateTime));
    
            var logdatetoParameter = logdateto.HasValue ?
                new ObjectParameter("logdateto", logdateto) :
                new ObjectParameter("logdateto", typeof(System.DateTime));
    
            var logtitleParameter = logtitle != null ?
                new ObjectParameter("logtitle", logtitle) :
                new ObjectParameter("logtitle", typeof(string));
    
            var logmessageParameter = logmessage != null ?
                new ObjectParameter("logmessage", logmessage) :
                new ObjectParameter("logmessage", typeof(string));
    
            var additionalinformationParameter = additionalinformation != null ?
                new ObjectParameter("additionalinformation", additionalinformation) :
                new ObjectParameter("additionalinformation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLog", idParameter, logdatefromParameter, logdatetoParameter, logtitleParameter, logmessageParameter, additionalinformationParameter);
        }
    
        public virtual ObjectResult<string> DeleteLogByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteLogByID", idParameter);
        }
    
        public virtual int DeleteOrderDelivery(Nullable<int> id, Nullable<int> orderid, Nullable<int> serviceid, Nullable<int> methodid, Nullable<decimal> price, Nullable<System.DateTime> dateaddedfrom, Nullable<System.DateTime> dateaddedto, Nullable<System.DateTime> datemodifiedfrom, Nullable<System.DateTime> datemodifiedto, Nullable<int> status, string reason)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var orderidParameter = orderid.HasValue ?
                new ObjectParameter("orderid", orderid) :
                new ObjectParameter("orderid", typeof(int));
    
            var serviceidParameter = serviceid.HasValue ?
                new ObjectParameter("serviceid", serviceid) :
                new ObjectParameter("serviceid", typeof(int));
    
            var methodidParameter = methodid.HasValue ?
                new ObjectParameter("methodid", methodid) :
                new ObjectParameter("methodid", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var dateaddedfromParameter = dateaddedfrom.HasValue ?
                new ObjectParameter("dateaddedfrom", dateaddedfrom) :
                new ObjectParameter("dateaddedfrom", typeof(System.DateTime));
    
            var dateaddedtoParameter = dateaddedto.HasValue ?
                new ObjectParameter("dateaddedto", dateaddedto) :
                new ObjectParameter("dateaddedto", typeof(System.DateTime));
    
            var datemodifiedfromParameter = datemodifiedfrom.HasValue ?
                new ObjectParameter("datemodifiedfrom", datemodifiedfrom) :
                new ObjectParameter("datemodifiedfrom", typeof(System.DateTime));
    
            var datemodifiedtoParameter = datemodifiedto.HasValue ?
                new ObjectParameter("datemodifiedto", datemodifiedto) :
                new ObjectParameter("datemodifiedto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOrderDelivery", idParameter, orderidParameter, serviceidParameter, methodidParameter, priceParameter, dateaddedfromParameter, dateaddedtoParameter, datemodifiedfromParameter, datemodifiedtoParameter, statusParameter, reasonParameter);
        }
    
        public virtual ObjectResult<string> DeleteOrderDeliveryByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteOrderDeliveryByID", idParameter);
        }
    
        public virtual int DeletePaymentMethod(Nullable<int> id, string methodname)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var methodnameParameter = methodname != null ?
                new ObjectParameter("methodname", methodname) :
                new ObjectParameter("methodname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePaymentMethod", idParameter, methodnameParameter);
        }
    
        public virtual ObjectResult<string> DeletePaymentMethodByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeletePaymentMethodByID", idParameter);
        }
    
        public virtual int DeleteProduct(Nullable<int> id, string productname, Nullable<int> brandid, string description, Nullable<int> quantity, Nullable<decimal> price, Nullable<System.DateTime> expirydatefrom, Nullable<System.DateTime> expirydateto, string regnum, string partnum, string storagelocation)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productnameParameter = productname != null ?
                new ObjectParameter("productname", productname) :
                new ObjectParameter("productname", typeof(string));
    
            var brandidParameter = brandid.HasValue ?
                new ObjectParameter("brandid", brandid) :
                new ObjectParameter("brandid", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var expirydatefromParameter = expirydatefrom.HasValue ?
                new ObjectParameter("expirydatefrom", expirydatefrom) :
                new ObjectParameter("expirydatefrom", typeof(System.DateTime));
    
            var expirydatetoParameter = expirydateto.HasValue ?
                new ObjectParameter("expirydateto", expirydateto) :
                new ObjectParameter("expirydateto", typeof(System.DateTime));
    
            var regnumParameter = regnum != null ?
                new ObjectParameter("regnum", regnum) :
                new ObjectParameter("regnum", typeof(string));
    
            var partnumParameter = partnum != null ?
                new ObjectParameter("partnum", partnum) :
                new ObjectParameter("partnum", typeof(string));
    
            var storagelocationParameter = storagelocation != null ?
                new ObjectParameter("storagelocation", storagelocation) :
                new ObjectParameter("storagelocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProduct", idParameter, productnameParameter, brandidParameter, descriptionParameter, quantityParameter, priceParameter, expirydatefromParameter, expirydatetoParameter, regnumParameter, partnumParameter, storagelocationParameter);
        }
    
        public virtual ObjectResult<string> DeleteProductByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteProductByID", idParameter);
        }
    
        public virtual int DeleteProductImage(Nullable<int> id, Nullable<int> productid, string imagename)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var imagenameParameter = imagename != null ?
                new ObjectParameter("imagename", imagename) :
                new ObjectParameter("imagename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductImage", idParameter, productidParameter, imagenameParameter);
        }
    
        public virtual ObjectResult<string> DeleteProductImageByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteProductImageByID", idParameter);
        }
    
        public virtual int DeleteProductOrder(Nullable<int> id, Nullable<int> productid, Nullable<int> quantity, Nullable<decimal> price, Nullable<int> clientid, Nullable<int> employeeid, Nullable<System.DateTime> dateaddedfrom, Nullable<System.DateTime> dateaddedto, Nullable<System.DateTime> datemodifiedfrom, Nullable<System.DateTime> datemodifiedto, Nullable<int> status, string reason)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(int));
    
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            var dateaddedfromParameter = dateaddedfrom.HasValue ?
                new ObjectParameter("dateaddedfrom", dateaddedfrom) :
                new ObjectParameter("dateaddedfrom", typeof(System.DateTime));
    
            var dateaddedtoParameter = dateaddedto.HasValue ?
                new ObjectParameter("dateaddedto", dateaddedto) :
                new ObjectParameter("dateaddedto", typeof(System.DateTime));
    
            var datemodifiedfromParameter = datemodifiedfrom.HasValue ?
                new ObjectParameter("datemodifiedfrom", datemodifiedfrom) :
                new ObjectParameter("datemodifiedfrom", typeof(System.DateTime));
    
            var datemodifiedtoParameter = datemodifiedto.HasValue ?
                new ObjectParameter("datemodifiedto", datemodifiedto) :
                new ObjectParameter("datemodifiedto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductOrder", idParameter, productidParameter, quantityParameter, priceParameter, clientidParameter, employeeidParameter, dateaddedfromParameter, dateaddedtoParameter, datemodifiedfromParameter, datemodifiedtoParameter, statusParameter, reasonParameter);
        }
    
        public virtual ObjectResult<string> DeleteProductOrderByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteProductOrderByID", idParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> id, string username, string password, string displayname, Nullable<System.DateTime> birthdatefrom, Nullable<System.DateTime> birthdateto, string phone, string email, string address, Nullable<decimal> balance, string diagnose, Nullable<System.DateTime> registerdatefrom, Nullable<System.DateTime> registerdateto, Nullable<int> role)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var displaynameParameter = displayname != null ?
                new ObjectParameter("displayname", displayname) :
                new ObjectParameter("displayname", typeof(string));
    
            var birthdatefromParameter = birthdatefrom.HasValue ?
                new ObjectParameter("birthdatefrom", birthdatefrom) :
                new ObjectParameter("birthdatefrom", typeof(System.DateTime));
    
            var birthdatetoParameter = birthdateto.HasValue ?
                new ObjectParameter("birthdateto", birthdateto) :
                new ObjectParameter("birthdateto", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(decimal));
    
            var diagnoseParameter = diagnose != null ?
                new ObjectParameter("diagnose", diagnose) :
                new ObjectParameter("diagnose", typeof(string));
    
            var registerdatefromParameter = registerdatefrom.HasValue ?
                new ObjectParameter("registerdatefrom", registerdatefrom) :
                new ObjectParameter("registerdatefrom", typeof(System.DateTime));
    
            var registerdatetoParameter = registerdateto.HasValue ?
                new ObjectParameter("registerdateto", registerdateto) :
                new ObjectParameter("registerdateto", typeof(System.DateTime));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", idParameter, usernameParameter, passwordParameter, displaynameParameter, birthdatefromParameter, birthdatetoParameter, phoneParameter, emailParameter, addressParameter, balanceParameter, diagnoseParameter, registerdatefromParameter, registerdatetoParameter, roleParameter);
        }
    
        public virtual ObjectResult<string> DeleteUserByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteUserByID", idParameter);
        }
    
        public virtual ObjectResult<GetBrand_Result> GetBrand(Nullable<int> id, string brandname)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var brandnameParameter = brandname != null ?
                new ObjectParameter("brandname", brandname) :
                new ObjectParameter("brandname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBrand_Result>("GetBrand", idParameter, brandnameParameter);
        }
    
        public virtual ObjectResult<GetDeliveryService_Result> GetDeliveryService(Nullable<int> id, string servicename, Nullable<decimal> serviceprice)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var servicenameParameter = servicename != null ?
                new ObjectParameter("servicename", servicename) :
                new ObjectParameter("servicename", typeof(string));
    
            var servicepriceParameter = serviceprice.HasValue ?
                new ObjectParameter("serviceprice", serviceprice) :
                new ObjectParameter("serviceprice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeliveryService_Result>("GetDeliveryService", idParameter, servicenameParameter, servicepriceParameter);
        }
    
        public virtual ObjectResult<GetLog_Result> GetLog(Nullable<int> id, Nullable<System.DateTime> logdatefrom, Nullable<System.DateTime> logdateto, string logtitle, string logmessage, string additionalinformation)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var logdatefromParameter = logdatefrom.HasValue ?
                new ObjectParameter("logdatefrom", logdatefrom) :
                new ObjectParameter("logdatefrom", typeof(System.DateTime));
    
            var logdatetoParameter = logdateto.HasValue ?
                new ObjectParameter("logdateto", logdateto) :
                new ObjectParameter("logdateto", typeof(System.DateTime));
    
            var logtitleParameter = logtitle != null ?
                new ObjectParameter("logtitle", logtitle) :
                new ObjectParameter("logtitle", typeof(string));
    
            var logmessageParameter = logmessage != null ?
                new ObjectParameter("logmessage", logmessage) :
                new ObjectParameter("logmessage", typeof(string));
    
            var additionalinformationParameter = additionalinformation != null ?
                new ObjectParameter("additionalinformation", additionalinformation) :
                new ObjectParameter("additionalinformation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLog_Result>("GetLog", idParameter, logdatefromParameter, logdatetoParameter, logtitleParameter, logmessageParameter, additionalinformationParameter);
        }
    
        public virtual ObjectResult<GetOrderDelivery_Result> GetOrderDelivery(Nullable<int> id, Nullable<int> orderid, Nullable<int> serviceid, Nullable<int> methodid, Nullable<decimal> price, Nullable<System.DateTime> dateaddedfrom, Nullable<System.DateTime> dateaddedto, Nullable<System.DateTime> datemodifiedfrom, Nullable<System.DateTime> datemodifiedto, Nullable<int> status, string reason)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var orderidParameter = orderid.HasValue ?
                new ObjectParameter("orderid", orderid) :
                new ObjectParameter("orderid", typeof(int));
    
            var serviceidParameter = serviceid.HasValue ?
                new ObjectParameter("serviceid", serviceid) :
                new ObjectParameter("serviceid", typeof(int));
    
            var methodidParameter = methodid.HasValue ?
                new ObjectParameter("methodid", methodid) :
                new ObjectParameter("methodid", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var dateaddedfromParameter = dateaddedfrom.HasValue ?
                new ObjectParameter("dateaddedfrom", dateaddedfrom) :
                new ObjectParameter("dateaddedfrom", typeof(System.DateTime));
    
            var dateaddedtoParameter = dateaddedto.HasValue ?
                new ObjectParameter("dateaddedto", dateaddedto) :
                new ObjectParameter("dateaddedto", typeof(System.DateTime));
    
            var datemodifiedfromParameter = datemodifiedfrom.HasValue ?
                new ObjectParameter("datemodifiedfrom", datemodifiedfrom) :
                new ObjectParameter("datemodifiedfrom", typeof(System.DateTime));
    
            var datemodifiedtoParameter = datemodifiedto.HasValue ?
                new ObjectParameter("datemodifiedto", datemodifiedto) :
                new ObjectParameter("datemodifiedto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrderDelivery_Result>("GetOrderDelivery", idParameter, orderidParameter, serviceidParameter, methodidParameter, priceParameter, dateaddedfromParameter, dateaddedtoParameter, datemodifiedfromParameter, datemodifiedtoParameter, statusParameter, reasonParameter);
        }
    
        public virtual ObjectResult<GetPaymentMethod_Result> GetPaymentMethod(Nullable<int> id, string methodname)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var methodnameParameter = methodname != null ?
                new ObjectParameter("methodname", methodname) :
                new ObjectParameter("methodname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentMethod_Result>("GetPaymentMethod", idParameter, methodnameParameter);
        }
    
        public virtual ObjectResult<GetProduct_Result> GetProduct(Nullable<int> id, string productname, Nullable<int> brandid, string description, Nullable<int> quantity, Nullable<decimal> price, Nullable<System.DateTime> expirydatefrom, Nullable<System.DateTime> expirydateto, string regnum, string partnum, string storagelocation)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productnameParameter = productname != null ?
                new ObjectParameter("productname", productname) :
                new ObjectParameter("productname", typeof(string));
    
            var brandidParameter = brandid.HasValue ?
                new ObjectParameter("brandid", brandid) :
                new ObjectParameter("brandid", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var expirydatefromParameter = expirydatefrom.HasValue ?
                new ObjectParameter("expirydatefrom", expirydatefrom) :
                new ObjectParameter("expirydatefrom", typeof(System.DateTime));
    
            var expirydatetoParameter = expirydateto.HasValue ?
                new ObjectParameter("expirydateto", expirydateto) :
                new ObjectParameter("expirydateto", typeof(System.DateTime));
    
            var regnumParameter = regnum != null ?
                new ObjectParameter("regnum", regnum) :
                new ObjectParameter("regnum", typeof(string));
    
            var partnumParameter = partnum != null ?
                new ObjectParameter("partnum", partnum) :
                new ObjectParameter("partnum", typeof(string));
    
            var storagelocationParameter = storagelocation != null ?
                new ObjectParameter("storagelocation", storagelocation) :
                new ObjectParameter("storagelocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProduct_Result>("GetProduct", idParameter, productnameParameter, brandidParameter, descriptionParameter, quantityParameter, priceParameter, expirydatefromParameter, expirydatetoParameter, regnumParameter, partnumParameter, storagelocationParameter);
        }
    
        public virtual ObjectResult<GetProductImage_Result> GetProductImage(Nullable<int> id, Nullable<int> productid, string imagename)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var imagenameParameter = imagename != null ?
                new ObjectParameter("imagename", imagename) :
                new ObjectParameter("imagename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductImage_Result>("GetProductImage", idParameter, productidParameter, imagenameParameter);
        }
    
        public virtual ObjectResult<GetProductOrder_Result> GetProductOrder(Nullable<int> id, Nullable<int> productid, Nullable<int> quantity, Nullable<decimal> price, Nullable<int> clientid, Nullable<int> employeeid, Nullable<System.DateTime> dateaddedfrom, Nullable<System.DateTime> dateaddedto, Nullable<System.DateTime> datemodifiedfrom, Nullable<System.DateTime> datemodifiedto, Nullable<int> status, string reason)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var clientidParameter = clientid.HasValue ?
                new ObjectParameter("clientid", clientid) :
                new ObjectParameter("clientid", typeof(int));
    
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            var dateaddedfromParameter = dateaddedfrom.HasValue ?
                new ObjectParameter("dateaddedfrom", dateaddedfrom) :
                new ObjectParameter("dateaddedfrom", typeof(System.DateTime));
    
            var dateaddedtoParameter = dateaddedto.HasValue ?
                new ObjectParameter("dateaddedto", dateaddedto) :
                new ObjectParameter("dateaddedto", typeof(System.DateTime));
    
            var datemodifiedfromParameter = datemodifiedfrom.HasValue ?
                new ObjectParameter("datemodifiedfrom", datemodifiedfrom) :
                new ObjectParameter("datemodifiedfrom", typeof(System.DateTime));
    
            var datemodifiedtoParameter = datemodifiedto.HasValue ?
                new ObjectParameter("datemodifiedto", datemodifiedto) :
                new ObjectParameter("datemodifiedto", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductOrder_Result>("GetProductOrder", idParameter, productidParameter, quantityParameter, priceParameter, clientidParameter, employeeidParameter, dateaddedfromParameter, dateaddedtoParameter, datemodifiedfromParameter, datemodifiedtoParameter, statusParameter, reasonParameter);
        }
    
        public virtual ObjectResult<User> GetUser(Nullable<int> id, string username, string password, string displayname, Nullable<System.DateTime> birthdatefrom, Nullable<System.DateTime> birthdateto, string phone, string email, string address, Nullable<decimal> balance, string diagnose, Nullable<System.DateTime> registerdatefrom, Nullable<System.DateTime> registerdateto, Nullable<int> role)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var displaynameParameter = displayname != null ?
                new ObjectParameter("displayname", displayname) :
                new ObjectParameter("displayname", typeof(string));
    
            var birthdatefromParameter = birthdatefrom.HasValue ?
                new ObjectParameter("birthdatefrom", birthdatefrom) :
                new ObjectParameter("birthdatefrom", typeof(System.DateTime));
    
            var birthdatetoParameter = birthdateto.HasValue ?
                new ObjectParameter("birthdateto", birthdateto) :
                new ObjectParameter("birthdateto", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(decimal));
    
            var diagnoseParameter = diagnose != null ?
                new ObjectParameter("diagnose", diagnose) :
                new ObjectParameter("diagnose", typeof(string));
    
            var registerdatefromParameter = registerdatefrom.HasValue ?
                new ObjectParameter("registerdatefrom", registerdatefrom) :
                new ObjectParameter("registerdatefrom", typeof(System.DateTime));
    
            var registerdatetoParameter = registerdateto.HasValue ?
                new ObjectParameter("registerdateto", registerdateto) :
                new ObjectParameter("registerdateto", typeof(System.DateTime));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("GetUser", idParameter, usernameParameter, passwordParameter, displaynameParameter, birthdatefromParameter, birthdatetoParameter, phoneParameter, emailParameter, addressParameter, balanceParameter, diagnoseParameter, registerdatefromParameter, registerdatetoParameter, roleParameter);
        }
    
        public virtual ObjectResult<User> GetUser(Nullable<int> id, string username, string password, string displayname, Nullable<System.DateTime> birthdatefrom, Nullable<System.DateTime> birthdateto, string phone, string email, string address, Nullable<decimal> balance, string diagnose, Nullable<System.DateTime> registerdatefrom, Nullable<System.DateTime> registerdateto, Nullable<int> role, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var displaynameParameter = displayname != null ?
                new ObjectParameter("displayname", displayname) :
                new ObjectParameter("displayname", typeof(string));
    
            var birthdatefromParameter = birthdatefrom.HasValue ?
                new ObjectParameter("birthdatefrom", birthdatefrom) :
                new ObjectParameter("birthdatefrom", typeof(System.DateTime));
    
            var birthdatetoParameter = birthdateto.HasValue ?
                new ObjectParameter("birthdateto", birthdateto) :
                new ObjectParameter("birthdateto", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(decimal));
    
            var diagnoseParameter = diagnose != null ?
                new ObjectParameter("diagnose", diagnose) :
                new ObjectParameter("diagnose", typeof(string));
    
            var registerdatefromParameter = registerdatefrom.HasValue ?
                new ObjectParameter("registerdatefrom", registerdatefrom) :
                new ObjectParameter("registerdatefrom", typeof(System.DateTime));
    
            var registerdatetoParameter = registerdateto.HasValue ?
                new ObjectParameter("registerdateto", registerdateto) :
                new ObjectParameter("registerdateto", typeof(System.DateTime));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("GetUser", mergeOption, idParameter, usernameParameter, passwordParameter, displaynameParameter, birthdatefromParameter, birthdatetoParameter, phoneParameter, emailParameter, addressParameter, balanceParameter, diagnoseParameter, registerdatefromParameter, registerdatetoParameter, roleParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<string> UpdateBrandByID(Nullable<int> id, string new_brand_name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var new_brand_nameParameter = new_brand_name != null ?
                new ObjectParameter("new_brand_name", new_brand_name) :
                new ObjectParameter("new_brand_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateBrandByID", idParameter, new_brand_nameParameter);
        }
    
        public virtual ObjectResult<string> UpdateDeliveryServiceByID(Nullable<int> id, string new_service_name, Nullable<decimal> new_service_price)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var new_service_nameParameter = new_service_name != null ?
                new ObjectParameter("new_service_name", new_service_name) :
                new ObjectParameter("new_service_name", typeof(string));
    
            var new_service_priceParameter = new_service_price.HasValue ?
                new ObjectParameter("new_service_price", new_service_price) :
                new ObjectParameter("new_service_price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateDeliveryServiceByID", idParameter, new_service_nameParameter, new_service_priceParameter);
        }
    
        public virtual ObjectResult<string> UpdateLogByID(Nullable<int> id, string new_log_title, string new_log_message, string new_add_info)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var new_log_titleParameter = new_log_title != null ?
                new ObjectParameter("new_log_title", new_log_title) :
                new ObjectParameter("new_log_title", typeof(string));
    
            var new_log_messageParameter = new_log_message != null ?
                new ObjectParameter("new_log_message", new_log_message) :
                new ObjectParameter("new_log_message", typeof(string));
    
            var new_add_infoParameter = new_add_info != null ?
                new ObjectParameter("new_add_info", new_add_info) :
                new ObjectParameter("new_add_info", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateLogByID", idParameter, new_log_titleParameter, new_log_messageParameter, new_add_infoParameter);
        }
    
        public virtual ObjectResult<string> UpdateOrderDeliveryByID(Nullable<int> id, Nullable<int> new_order_id, Nullable<int> new_service_id, Nullable<int> new_method_id, Nullable<int> new_status, string new_reason)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var new_order_idParameter = new_order_id.HasValue ?
                new ObjectParameter("new_order_id", new_order_id) :
                new ObjectParameter("new_order_id", typeof(int));
    
            var new_service_idParameter = new_service_id.HasValue ?
                new ObjectParameter("new_service_id", new_service_id) :
                new ObjectParameter("new_service_id", typeof(int));
    
            var new_method_idParameter = new_method_id.HasValue ?
                new ObjectParameter("new_method_id", new_method_id) :
                new ObjectParameter("new_method_id", typeof(int));
    
            var new_statusParameter = new_status.HasValue ?
                new ObjectParameter("new_status", new_status) :
                new ObjectParameter("new_status", typeof(int));
    
            var new_reasonParameter = new_reason != null ?
                new ObjectParameter("new_reason", new_reason) :
                new ObjectParameter("new_reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateOrderDeliveryByID", idParameter, new_order_idParameter, new_service_idParameter, new_method_idParameter, new_statusParameter, new_reasonParameter);
        }
    
        public virtual ObjectResult<string> UpdatePaymentMethodByID(Nullable<int> id, string new_method_name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var new_method_nameParameter = new_method_name != null ?
                new ObjectParameter("new_method_name", new_method_name) :
                new ObjectParameter("new_method_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdatePaymentMethodByID", idParameter, new_method_nameParameter);
        }
    
        public virtual ObjectResult<string> UpdateProductByID(Nullable<int> id, string new_product_name, Nullable<int> new_brand_id, string new_description, Nullable<int> new_quantity, Nullable<decimal> new_price, Nullable<System.DateTime> new_expiry_date, string new_reg_num, string new_part_num, string new_storage_location)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var new_product_nameParameter = new_product_name != null ?
                new ObjectParameter("new_product_name", new_product_name) :
                new ObjectParameter("new_product_name", typeof(string));
    
            var new_brand_idParameter = new_brand_id.HasValue ?
                new ObjectParameter("new_brand_id", new_brand_id) :
                new ObjectParameter("new_brand_id", typeof(int));
    
            var new_descriptionParameter = new_description != null ?
                new ObjectParameter("new_description", new_description) :
                new ObjectParameter("new_description", typeof(string));
    
            var new_quantityParameter = new_quantity.HasValue ?
                new ObjectParameter("new_quantity", new_quantity) :
                new ObjectParameter("new_quantity", typeof(int));
    
            var new_priceParameter = new_price.HasValue ?
                new ObjectParameter("new_price", new_price) :
                new ObjectParameter("new_price", typeof(decimal));
    
            var new_expiry_dateParameter = new_expiry_date.HasValue ?
                new ObjectParameter("new_expiry_date", new_expiry_date) :
                new ObjectParameter("new_expiry_date", typeof(System.DateTime));
    
            var new_reg_numParameter = new_reg_num != null ?
                new ObjectParameter("new_reg_num", new_reg_num) :
                new ObjectParameter("new_reg_num", typeof(string));
    
            var new_part_numParameter = new_part_num != null ?
                new ObjectParameter("new_part_num", new_part_num) :
                new ObjectParameter("new_part_num", typeof(string));
    
            var new_storage_locationParameter = new_storage_location != null ?
                new ObjectParameter("new_storage_location", new_storage_location) :
                new ObjectParameter("new_storage_location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateProductByID", idParameter, new_product_nameParameter, new_brand_idParameter, new_descriptionParameter, new_quantityParameter, new_priceParameter, new_expiry_dateParameter, new_reg_numParameter, new_part_numParameter, new_storage_locationParameter);
        }
    
        public virtual ObjectResult<string> UpdateProductImageByID(Nullable<int> id, Nullable<int> new_product_id, string new_image_name, byte[] new_image_data)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var new_product_idParameter = new_product_id.HasValue ?
                new ObjectParameter("new_product_id", new_product_id) :
                new ObjectParameter("new_product_id", typeof(int));
    
            var new_image_nameParameter = new_image_name != null ?
                new ObjectParameter("new_image_name", new_image_name) :
                new ObjectParameter("new_image_name", typeof(string));
    
            var new_image_dataParameter = new_image_data != null ?
                new ObjectParameter("new_image_data", new_image_data) :
                new ObjectParameter("new_image_data", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateProductImageByID", idParameter, new_product_idParameter, new_image_nameParameter, new_image_dataParameter);
        }
    
        public virtual ObjectResult<string> UpdateProductOrderByID(Nullable<int> id, Nullable<int> new_product_id, Nullable<int> new_desired_quantity, Nullable<decimal> new_price_override, Nullable<int> new_client_id, Nullable<int> new_employee_id, Nullable<int> new_status, string new_reason)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var new_product_idParameter = new_product_id.HasValue ?
                new ObjectParameter("new_product_id", new_product_id) :
                new ObjectParameter("new_product_id", typeof(int));
    
            var new_desired_quantityParameter = new_desired_quantity.HasValue ?
                new ObjectParameter("new_desired_quantity", new_desired_quantity) :
                new ObjectParameter("new_desired_quantity", typeof(int));
    
            var new_price_overrideParameter = new_price_override.HasValue ?
                new ObjectParameter("new_price_override", new_price_override) :
                new ObjectParameter("new_price_override", typeof(decimal));
    
            var new_client_idParameter = new_client_id.HasValue ?
                new ObjectParameter("new_client_id", new_client_id) :
                new ObjectParameter("new_client_id", typeof(int));
    
            var new_employee_idParameter = new_employee_id.HasValue ?
                new ObjectParameter("new_employee_id", new_employee_id) :
                new ObjectParameter("new_employee_id", typeof(int));
    
            var new_statusParameter = new_status.HasValue ?
                new ObjectParameter("new_status", new_status) :
                new ObjectParameter("new_status", typeof(int));
    
            var new_reasonParameter = new_reason != null ?
                new ObjectParameter("new_reason", new_reason) :
                new ObjectParameter("new_reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateProductOrderByID", idParameter, new_product_idParameter, new_desired_quantityParameter, new_price_overrideParameter, new_client_idParameter, new_employee_idParameter, new_statusParameter, new_reasonParameter);
        }
    
        public virtual ObjectResult<string> UpdateUserByID(Nullable<int> id, string new_user_name, string new_password, string new_display_name, Nullable<System.DateTime> new_birth_date, string new_phone, string new_email, string new_address, byte[] new_profile_pic, Nullable<decimal> new_balance, string new_diagnose, Nullable<int> new_role)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var new_user_nameParameter = new_user_name != null ?
                new ObjectParameter("new_user_name", new_user_name) :
                new ObjectParameter("new_user_name", typeof(string));
    
            var new_passwordParameter = new_password != null ?
                new ObjectParameter("new_password", new_password) :
                new ObjectParameter("new_password", typeof(string));
    
            var new_display_nameParameter = new_display_name != null ?
                new ObjectParameter("new_display_name", new_display_name) :
                new ObjectParameter("new_display_name", typeof(string));
    
            var new_birth_dateParameter = new_birth_date.HasValue ?
                new ObjectParameter("new_birth_date", new_birth_date) :
                new ObjectParameter("new_birth_date", typeof(System.DateTime));
    
            var new_phoneParameter = new_phone != null ?
                new ObjectParameter("new_phone", new_phone) :
                new ObjectParameter("new_phone", typeof(string));
    
            var new_emailParameter = new_email != null ?
                new ObjectParameter("new_email", new_email) :
                new ObjectParameter("new_email", typeof(string));
    
            var new_addressParameter = new_address != null ?
                new ObjectParameter("new_address", new_address) :
                new ObjectParameter("new_address", typeof(string));
    
            var new_profile_picParameter = new_profile_pic != null ?
                new ObjectParameter("new_profile_pic", new_profile_pic) :
                new ObjectParameter("new_profile_pic", typeof(byte[]));
    
            var new_balanceParameter = new_balance.HasValue ?
                new ObjectParameter("new_balance", new_balance) :
                new ObjectParameter("new_balance", typeof(decimal));
    
            var new_diagnoseParameter = new_diagnose != null ?
                new ObjectParameter("new_diagnose", new_diagnose) :
                new ObjectParameter("new_diagnose", typeof(string));
    
            var new_roleParameter = new_role.HasValue ?
                new ObjectParameter("new_role", new_role) :
                new ObjectParameter("new_role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateUserByID", idParameter, new_user_nameParameter, new_passwordParameter, new_display_nameParameter, new_birth_dateParameter, new_phoneParameter, new_emailParameter, new_addressParameter, new_profile_picParameter, new_balanceParameter, new_diagnoseParameter, new_roleParameter);
        }
    }
}
